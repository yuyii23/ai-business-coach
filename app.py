import streamlit as st
import uuid
from session_manager import load_session, save_session
from llm_central import ask_llm
import json
from datetime import datetime

st.set_page_config(page_title="AI ‡πÇ‡∏Ñ‡πâ‡∏ä‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à SME", page_icon="üöÄ")
st.markdown("<style>body {background: #f7f9fc;}</style>", unsafe_allow_html=True)
st.title("AI ‡πÇ‡∏Ñ‡πâ‡∏ä‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SME / ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ üöÄ")

if "session_id" not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())

session_id = st.session_state.session_id
session_data = load_session(session_id)

brand_strategy_fields = [
    {"key": "target_audience", "question": "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏Ñ‡∏£?"},
    {"key": "brand_identity", "question": "‡∏≠‡∏±‡∏ï‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?"},
    {"key": "brand_archetypes", "question": "‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?"},
    {"key": "competition_analysis", "question": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏π‡πà‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ñ‡∏∏‡∏ì"},
    {"key": "mission_vision_values", "question": "‡∏û‡∏±‡∏ô‡∏ò‡∏Å‡∏¥‡∏à ‡∏ß‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡∏®‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå"},
    {"key": "brand_story", "question": "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"},
    {"key": "alignment_strategy", "question": "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Alignment ‡πÉ‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£"},
    {"key": "metrics_plan", "question": "‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå"},
    {"key": "vendor_recommendations", "question": "‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠ vendor ‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏´‡∏°?"},
]

if not session_data:
    session_data = {
        "session_id": session_id,
        "state": {
            "brand_strategy": {field["key"]: None for field in brand_strategy_fields},
            "conversation_history": [],
        }
    }

# state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flow ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠
if "bs_step" not in st.session_state:
    st.session_state.bs_step = 0
if "bs_answers" not in st.session_state:
    st.session_state.bs_answers = {}
if "bs_bot_reply" not in st.session_state:
    st.session_state.bs_bot_reply = {}

# --- Custom CSS for chat bubbles ---
st.markdown("""
<style>
.bubble-user {
  background: #464646;
  border-radius: 18px 18px 18px 4px;
  padding: 12px 18px;
  margin-bottom: 6px;
  box-shadow: 0 1px 4px rgba(0,0,0,.12);
  display: inline-block;
  max-width: 70%;
}
.bubble-bot {
  background: #464646;
  border-radius: 18px 18px 4px 18px;
  padding: 12px 18px;
  margin-bottom: 18px;
  box-shadow: 0 1px 4px rgba(0,0,0,.12);
  display: inline-block;
  max-width: 70%;
}
.bubble-row {
  display: flex; flex-direction: row; align-items: flex-end; margin-bottom: 2px;
}
.bubble-row.user { justify-content: flex-start; }
.bubble-row.bot { justify-content: flex-end; }
.avatar { width: 36px; height: 36px; border-radius: 50%; margin-right: 10px; }
.avatar-bot { margin-left: 10px; }
.timestamp { font-size: 12px; color: #b0b0b0; margin-left: 12px; }
</style>
""", unsafe_allow_html=True)

st.subheader("Brand Strategy Chat")

# --- Render chat history (bubbles) ---
for i in range(st.session_state.bs_step):
    field = brand_strategy_fields[i]
    user_ans = st.session_state.bs_answers.get(field["key"], "")
    bot_ans = st.session_state.bs_bot_reply.get(field["key"], "")
    ts = datetime.now().strftime("%H:%M")
    # User bubble (left)
    st.markdown(
        f"""
        <div class='bubble-row user'>
            <img src='https://randomuser.me/api/portraits/men/10.jpg' class='avatar'/>
            <span class='bubble-user'><b>‡∏Ñ‡∏∏‡∏ì:</b> {user_ans}</span>
            <span class='timestamp'>{ts}</span>
        </div>
        """,
        unsafe_allow_html=True
    )
    # Bot bubble (right)
    if bot_ans:
        st.markdown(
            f"""
            <div class='bubble-row bot'>
                <span class='timestamp'>{ts}</span>
                <span class='bubble-bot'><b>‡πÇ‡∏Ñ‡πâ‡∏ä:</b> {bot_ans}</span>
                <img src='https://randomuser.me/api/portraits/lego/2.jpg' class='avatar avatar-bot'/>
            </div>
            """,
            unsafe_allow_html=True
        )

# --- ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ---
if st.session_state.bs_step < len(brand_strategy_fields):
    current_field = brand_strategy_fields[st.session_state.bs_step]
    st.markdown(f"<div class='bubble-row bot'><span class='bubble-bot'><b>‡πÇ‡∏Ñ‡πâ‡∏ä‡∏ñ‡∏≤‡∏°:</b> {current_field['question']}</span></div>", unsafe_allow_html=True)
    user_reply = st.text_input("‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", key=f"bs_answer_{st.session_state.bs_step}")
    if user_reply:
        st.session_state.bs_answers[current_field["key"]] = user_reply
        session_data["state"]["brand_strategy"][current_field["key"]] = user_reply
        session_data["state"]["conversation_history"].append({"role": "user", "content": user_reply})

        # --- ‡∏õ‡∏£‡∏±‡∏ö prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö vendor ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ---
        if current_field["key"] == "vendor_recommendations":
            prompt = (
                f"‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {current_field['question']}\n"
                f"‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user_reply}\n"
                "‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ vendor ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏Å‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
            )
        else:
            prompt = (
                f"‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {current_field['question']}\n"
                f"‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user_reply}\n"
                "‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ feedback ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡πÇ‡∏Ñ‡πâ‡∏ä‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"
            )

        bot_reply = ask_llm(prompt)
        st.session_state.bs_bot_reply[current_field["key"]] = bot_reply
        session_data["state"]["conversation_history"].append({"role": "assistant", "content": bot_reply})

        save_session(session_data)
        st.session_state.bs_step += 1
        st.rerun()

# --- ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠ ---

if st.session_state.bs_step == len(brand_strategy_fields):
    st.success("‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß!")
    st.json(session_data["state"]["brand_strategy"])

    if st.button("‡∏™‡∏£‡πâ‡∏≤‡∏á Business Pitch ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏™‡∏±‡πâ‡∏ô/‡πÄ‡∏ï‡πá‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ vendor ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á)"):
        # ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô context
        pitch_context = "\n".join(
            [
                f"{field['question']} {st.session_state.bs_answers.get(field['key'], '')}"
                for field in brand_strategy_fields
            ]
        )

        # Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LLM
        pitch_prompt = (
            "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:\n"
            f"{pitch_context}\n\n"
            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Business Pitch ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ 1 ‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏ô‡∏≠‡∏£‡πå "
            "‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° (‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏ä‡∏π‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå ‡∏Ø‡∏•‡∏Ø) "
            "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ vendor ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡πÑ‡∏ó‡∏¢/‡∏™‡∏≤‡∏Å‡∏•) ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ñ‡∏™‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢"
        )
        pitch = ask_llm(pitch_prompt)

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó Bubble
        st.markdown("""
        <div class='bubble-row bot'>
            <span class='bubble-bot'><b>Business Pitch + Vendor & Case Example:</b><br>{}</span>
        </div>
        """.format(pitch), unsafe_allow_html=True)